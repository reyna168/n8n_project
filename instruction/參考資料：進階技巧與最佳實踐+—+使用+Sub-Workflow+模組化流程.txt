🧩 子流程 A：資料清理（Data Cleaning）
🎯 功能說明
此子流程負責標準化客戶資料，包括去除多餘空白、統一大小寫、格式化電話號碼等。​

🛠️ 節點設計
Execute Sub-workflow Trigger：

Input Data Mode：​Define using fields below

定義欄位：​firstName、lastName、email、phone​


Function 節點：清理資料：

代碼範例：
return items.map(item => {
  const firstName = item.json.firstName;
  const lastName = item.json.lastName;
  const email = item.json.email;
  const phone = item.json.phone;

  return {
    json: {
      firstName: typeof firstName === 'string' ? firstName.trim() : '',
      lastName: typeof lastName === 'string' ? lastName.trim() : '',
      email: typeof email === 'string' ? email.trim().toLowerCase() : '',
      phone: typeof phone === 'string' ? phone.replace(/\D/g, '') : ''
    }
  };
});


輸出節點：​將清理後的資料傳回主流程。​


🧩 子流程 B：資料驗證（Data Validation）
🎯 功能說明
此子流程負責驗證客戶資料的正確性，例如檢查必填欄位是否存在、Email 格式是否正確、電話號碼長度是否符合規範等。​

🛠️ 節點設計
Execute Sub-workflow Trigger：

Input Data Mode：​Define using fields below

定義欄位：​firstName、lastName、email、phone​

Function 節點：驗證資料：

代碼範例：
return items.map(item => {
  const { firstName, lastName, email, phone } = item.json;
  const errors = [];

  // 檢查姓名欄位
  if (!firstName || typeof firstName !== 'string' || !firstName.trim()) {
    errors.push('名字為必填項目，且不得為空白');
  }
  if (!lastName || typeof lastName !== 'string' || !lastName.trim()) {
    errors.push('姓氏為必填項目，且不得為空白');
  }

  // 檢查 Email 格式
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!email || typeof email !== 'string' || !emailRegex.test(email)) {
    errors.push('Email 格式不正確或為空');
  }

  // 檢查電話號碼長度
  if (!phone || typeof phone !== 'string' || phone.replace(/\D/g, '').length < 8) {
    errors.push('電話號碼長度不足或格式不正確');
  }

  return {
    json: {
      ...item.json,
      isValid: errors.length === 0,
      errors
    }
  };
});

輸出節點：​將驗證結果傳回主流程。​

🧩 子流程 C：資料儲存（Data Storage）
🎯 功能說明
此子流程負責將已清理且驗證通過的客戶資料儲存至資料庫中。​

🛠️ 節點設計
Execute Sub-workflow Trigger：

Input Data Mode：​Define using fields below

定義欄位：​firstName、lastName、email、phone、isValid、errors​


IF 節點：檢查資料是否有效：
條件設定：​isValid 為 true​


輸出節點：​回傳儲存結果或錯誤訊息。​

🔄 主流程整合
在主工作流程中，依序呼叫上述三個子流程，並根據每個子流程的輸出結果決定後續操作。​

資料輸入：​從表單、API 或其他來源接收原始客戶資料。​

呼叫子流程 A（資料清理）：

節點：​Execute Sub-workflow

設定：

Source：Database

Workflow：Data Cleaning

Mode：Run once for each item

呼叫子流程 B（資料驗證）：

節點：​Execute Sub-workflow

設定：

Source：Database

Workflow：Data Validation

Mode：Run once for each item

呼叫子流程 C（資料儲存）：

節點：​Execute Sub-workflow

設定：

Source：Database

Workflow：Data Storage

Mode：Run once for each item

結果處理：​根據子流程 C 的輸出，記錄成功與失敗的項目，並進行相應處理。


🧪 主流程中的模擬資料設置
1. 使用 Set 節點建立測試資料
在主流程中添加一個 Set 節點，並設置以下欄位：​

firstName：John

lastName：Doe

email：john.doe@example.com

phone：(123)  456-7890​


這樣的設置提供了一筆完整且格式正確的客戶資料，適合用於測試資料清理與驗證子流程。​

2. 呼叫子流程並傳遞資料
在主流程中，依序添加三個 Execute Sub-workflow 節點，分別對應資料清理、驗證與儲存子流程。​

資料清理子流程：

設定 Source 為 Database，選擇對應的子流程。

將 Set 節點的輸出連接至此節點的輸入。​

資料驗證子流程：

同樣設定 Source 為 Database，選擇對應的子流程。

將資料清理子流程的輸出連接至此節點的輸入。​

資料儲存子流程：

設定方式與前兩個子流程相同。

將資料驗證子流程的輸出連接至此節點的輸入。​

這樣的串接方式確保資料能夠依序通過三個子流程，並在每個階段進行相應的處理。​


🔍 測試與驗證
完成上述設置後，您可以執行主流程，觀察每個子流程的輸出結果：​

資料清理子流程：​檢查是否成功去除多餘空白、統一大小寫、格式化電話號碼等。

資料驗證子流程：​確認是否正確驗證了必填欄位、Email 格式與電話號碼長度。

資料儲存子流程：​確保資料僅在驗證通過的情況下被儲存至資料庫。​

透過這樣的測試流程，您可以有效地驗證每個子流程的功能，並確保整體流程的正確性。